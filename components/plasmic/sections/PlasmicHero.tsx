// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kBiiqTtxZvnVSTutAvHVvx
// Component: GAgBMdieo56a

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: 7RW-0EHs1VqU/component
import Placeholder from "../../Placeholder"; // plasmic-import: rSHAt6reuZrC/component

import { ModeValue, useMode } from "../global/PlasmicGlobalVariant__Mode"; // plasmic-import: 4o07efrW3bsm/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_global_css from "../global/plasmic_global.module.css"; // plasmic-import: 8hqEu73KETDHFVi1kzitzB/projectcss
import plasmic_semantic_css from "../semantic/plasmic_semantic.module.css"; // plasmic-import: b1udyYxbVnA5YsUcRMaXei/projectcss
import plasmic_components_css from "../components/plasmic_components.module.css"; // plasmic-import: 5ccFCnH7of5M9MPpSs86Uj/projectcss
import plasmic_patterns_css from "../patterns/plasmic_patterns.module.css"; // plasmic-import: ddwNfuV1d3sS7wxTc5aLdh/projectcss
import projectcss from "./plasmic_sections.module.css"; // plasmic-import: kBiiqTtxZvnVSTutAvHVvx/projectcss
import sty from "./PlasmicHero.module.css"; // plasmic-import: GAgBMdieo56a/css

import ChecksvgIcon from "../components/icons/PlasmicIcon__Checksvg"; // plasmic-import: Gl9W2RPSIc13/icon
import IconrightArrowIcon from "../components/icons/PlasmicIcon__IconrightArrow"; // plasmic-import: WAD5gXhAHTho/icon

createPlasmicElementProxy;

export type PlasmicHero__VariantMembers = {};
export type PlasmicHero__VariantsArgs = {};
type VariantPropType = keyof PlasmicHero__VariantsArgs;
export const PlasmicHero__VariantProps = new Array<VariantPropType>();

export type PlasmicHero__ArgsType = {};
type ArgPropType = keyof PlasmicHero__ArgsType;
export const PlasmicHero__ArgProps = new Array<ArgPropType>();

export type PlasmicHero__OverridesType = {
  root?: Flex__<"div">;
  hero?: Flex__<"div">;
  titleContentPlaceholder?: Flex__<"div">;
  titleContentButtons?: Flex__<"div">;
  titleContent?: Flex__<"div">;
  buttonsText?: Flex__<"div">;
  buttons?: Flex__<"div">;
  button?: Flex__<typeof Button>;
  button2?: Flex__<typeof Button>;
  placeholder2?: Flex__<typeof Placeholder>;
  freeBox?: Flex__<"div">;
};

export interface DefaultHeroProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHero__RenderFunc(props: {
  variants: PlasmicHero__VariantsArgs;
  args: PlasmicHero__ArgsType;
  overrides: PlasmicHero__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    mode: useMode()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_global_css.plasmic_tokens,
        plasmic_semantic_css.plasmic_tokens,
        plasmic_components_css.plasmic_tokens,
        plasmic_patterns_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_global_css.global_mode_dark]: hasVariant(
            globalVariants,
            "mode",
            "dark"
          )
        }
      )}
    >
      <div
        data-plasmic-name={"hero"}
        data-plasmic-override={overrides.hero}
        className={classNames(projectcss.all, sty.hero)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"titleContentPlaceholder"}
          data-plasmic-override={overrides.titleContentPlaceholder}
          hasGap={true}
          className={classNames(projectcss.all, sty.titleContentPlaceholder)}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"titleContentButtons"}
            data-plasmic-override={overrides.titleContentButtons}
            hasGap={true}
            className={classNames(projectcss.all, sty.titleContentButtons)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"titleContent"}
              data-plasmic-override={overrides.titleContent}
              hasGap={true}
              className={classNames(projectcss.all, sty.titleContent)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tFo79
                )}
              >
                {"Smile, breathe and go slowly."}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pxX2
                )}
              >
                {
                  "This dew like life fades away; time speeds swiftly. In this short life of ours, avoid involvement in superfluous things and just study the Way."
                }
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"buttonsText"}
              data-plasmic-override={overrides.buttonsText}
              hasGap={true}
              className={classNames(projectcss.all, sty.buttonsText)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"buttons"}
                data-plasmic-override={overrides.buttons}
                hasGap={true}
                className={classNames(projectcss.all, sty.buttons)}
              >
                <Button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button)}
                  outline={"original"}
                  showEndIcon={true}
                />

                <Button
                  data-plasmic-name={"button2"}
                  data-plasmic-override={overrides.button2}
                  className={classNames("__wab_instance", sty.button2)}
                  showEndIcon={true}
                />
              </Stack__>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hSXk1
                )}
              >
                {"*No Credit Card Required"}
              </div>
            </Stack__>
          </Stack__>
          <Placeholder
            data-plasmic-name={"placeholder2"}
            data-plasmic-override={overrides.placeholder2}
            className={classNames("__wab_instance", sty.placeholder2)}
          />

          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          />
        </Stack__>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "hero",
    "titleContentPlaceholder",
    "titleContentButtons",
    "titleContent",
    "buttonsText",
    "buttons",
    "button",
    "button2",
    "placeholder2",
    "freeBox"
  ],
  hero: [
    "hero",
    "titleContentPlaceholder",
    "titleContentButtons",
    "titleContent",
    "buttonsText",
    "buttons",
    "button",
    "button2",
    "placeholder2",
    "freeBox"
  ],
  titleContentPlaceholder: [
    "titleContentPlaceholder",
    "titleContentButtons",
    "titleContent",
    "buttonsText",
    "buttons",
    "button",
    "button2",
    "placeholder2",
    "freeBox"
  ],
  titleContentButtons: [
    "titleContentButtons",
    "titleContent",
    "buttonsText",
    "buttons",
    "button",
    "button2"
  ],
  titleContent: ["titleContent"],
  buttonsText: ["buttonsText", "buttons", "button", "button2"],
  buttons: ["buttons", "button", "button2"],
  button: ["button"],
  button2: ["button2"],
  placeholder2: ["placeholder2"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  hero: "div";
  titleContentPlaceholder: "div";
  titleContentButtons: "div";
  titleContent: "div";
  buttonsText: "div";
  buttons: "div";
  button: typeof Button;
  button2: typeof Button;
  placeholder2: typeof Placeholder;
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHero__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHero__VariantsArgs;
    args?: PlasmicHero__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHero__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHero__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHero__ArgProps,
          internalVariantPropNames: PlasmicHero__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHero__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHero";
  } else {
    func.displayName = `PlasmicHero.${nodeName}`;
  }
  return func;
}

export const PlasmicHero = Object.assign(
  // Top-level PlasmicHero renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    hero: makeNodeComponent("hero"),
    titleContentPlaceholder: makeNodeComponent("titleContentPlaceholder"),
    titleContentButtons: makeNodeComponent("titleContentButtons"),
    titleContent: makeNodeComponent("titleContent"),
    buttonsText: makeNodeComponent("buttonsText"),
    buttons: makeNodeComponent("buttons"),
    button: makeNodeComponent("button"),
    button2: makeNodeComponent("button2"),
    placeholder2: makeNodeComponent("placeholder2"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicHero
    internalVariantProps: PlasmicHero__VariantProps,
    internalArgProps: PlasmicHero__ArgProps
  }
);

export default PlasmicHero;
/* prettier-ignore-end */
