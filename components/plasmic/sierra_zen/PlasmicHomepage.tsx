// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: t21UWfBLBu7JnTQPFAhPfr
// Component: TJTGHROXeAqF

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import NavigationBar from "../../NavigationBar"; // plasmic-import: praQfa1JW-GU/component
import Hero from "../../Hero"; // plasmic-import: GAgBMdieo56a/component
import Features from "../../Features"; // plasmic-import: MJ8poo-NUbWA/component
import Team from "../../Team"; // plasmic-import: XKAFJuUYdmRi/component
import Pricing from "../../Pricing"; // plasmic-import: HqnaUHdWU3HH/component
import Footer from "../../Footer"; // plasmic-import: R5STJBdF2mzK/component

import {
  BrandsValue,
  useBrands
} from "../semantic/PlasmicGlobalVariant__Brands"; // plasmic-import: hRp4Pxy9jJeD/globalVariant
import { ModeValue, useMode } from "../global/PlasmicGlobalVariant__Mode"; // plasmic-import: 4o07efrW3bsm/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_sections_css from "../sections/plasmic_sections.module.css"; // plasmic-import: kBiiqTtxZvnVSTutAvHVvx/projectcss
import plasmic_patterns_css from "../patterns/plasmic_patterns.module.css"; // plasmic-import: ddwNfuV1d3sS7wxTc5aLdh/projectcss
import plasmic_components_css from "../components/plasmic_components.module.css"; // plasmic-import: 5ccFCnH7of5M9MPpSs86Uj/projectcss
import plasmic_semantic_css from "../semantic/plasmic_semantic.module.css"; // plasmic-import: b1udyYxbVnA5YsUcRMaXei/projectcss
import plasmic_global_css from "../global/plasmic_global.module.css"; // plasmic-import: 8hqEu73KETDHFVi1kzitzB/projectcss
import projectcss from "./plasmic_sierra_zen.module.css"; // plasmic-import: t21UWfBLBu7JnTQPFAhPfr/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: TJTGHROXeAqF/css

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  pagePreview?: Flex__<"div">;
  navigationBar?: Flex__<typeof NavigationBar>;
  hero?: Flex__<typeof Hero>;
  features?: Flex__<typeof Features>;
  team?: Flex__<typeof Team>;
  pricing?: Flex__<typeof Pricing>;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultHomepageProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    brands: useBrands(),
    mode: useMode()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_sections_css.plasmic_tokens,
        plasmic_patterns_css.plasmic_tokens,
        plasmic_components_css.plasmic_tokens,
        plasmic_semantic_css.plasmic_tokens,
        plasmic_global_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootglobal_brands_seventeenSierra]: hasVariant(
            globalVariants,
            "brands",
            "seventeenSierra"
          ),
          [sty.rootglobal_mode_dark]: hasVariant(globalVariants, "mode", "dark")
        }
      )}
    >
      <div
        data-plasmic-name={"pagePreview"}
        data-plasmic-override={overrides.pagePreview}
        className={classNames(projectcss.all, sty.pagePreview)}
      >
        <NavigationBar
          data-plasmic-name={"navigationBar"}
          data-plasmic-override={overrides.navigationBar}
          className={classNames("__wab_instance", sty.navigationBar)}
        />

        <Hero
          data-plasmic-name={"hero"}
          data-plasmic-override={overrides.hero}
          className={classNames("__wab_instance", sty.hero)}
        />

        <Features
          data-plasmic-name={"features"}
          data-plasmic-override={overrides.features}
          className={classNames("__wab_instance", sty.features, {
            [sty.featuresglobal_mode_dark]: hasVariant(
              globalVariants,
              "mode",
              "dark"
            )
          })}
        />

        <Team
          data-plasmic-name={"team"}
          data-plasmic-override={overrides.team}
          className={classNames("__wab_instance", sty.team)}
        />

        <Pricing
          data-plasmic-name={"pricing"}
          data-plasmic-override={overrides.pricing}
          className={classNames("__wab_instance", sty.pricing)}
        />

        <Footer
          data-plasmic-name={"footer"}
          data-plasmic-override={overrides.footer}
          className={classNames("__wab_instance", sty.footer)}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pagePreview",
    "navigationBar",
    "hero",
    "features",
    "team",
    "pricing",
    "footer"
  ],
  pagePreview: [
    "pagePreview",
    "navigationBar",
    "hero",
    "features",
    "team",
    "pricing",
    "footer"
  ],
  navigationBar: ["navigationBar"],
  hero: ["hero"],
  features: ["features"],
  team: ["team"],
  pricing: ["pricing"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pagePreview: "div";
  navigationBar: typeof NavigationBar;
  hero: typeof Hero;
  features: typeof Features;
  team: typeof Team;
  pricing: typeof Pricing;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    pagePreview: makeNodeComponent("pagePreview"),
    navigationBar: makeNodeComponent("navigationBar"),
    hero: makeNodeComponent("hero"),
    features: makeNodeComponent("features"),
    team: makeNodeComponent("team"),
    pricing: makeNodeComponent("pricing"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
