// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ddwNfuV1d3sS7wxTc5aLdh
// Component: LvU4TvDvM6p3

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  ThemesValue,
  useThemes
} from "../semantic/PlasmicGlobalVariant__Themes"; // plasmic-import: 0bVElF6gUuDv/globalVariant
import { ModeValue, useMode } from "../global/PlasmicGlobalVariant__Mode"; // plasmic-import: 4o07efrW3bsm/globalVariant
import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: gje4CDHUuqhO/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_global_css from "../global/plasmic_global.module.css"; // plasmic-import: 8hqEu73KETDHFVi1kzitzB/projectcss
import plasmic_semantic_css from "../semantic/plasmic_semantic.module.css"; // plasmic-import: b1udyYxbVnA5YsUcRMaXei/projectcss
import plasmic_components_css from "../components/plasmic_components.module.css"; // plasmic-import: 5ccFCnH7of5M9MPpSs86Uj/projectcss
import projectcss from "./plasmic_patterns.module.css"; // plasmic-import: ddwNfuV1d3sS7wxTc5aLdh/projectcss
import sty from "./PlasmicFeature.module.css"; // plasmic-import: LvU4TvDvM6p3/css

import LogoiconOnlyIcon from "./icons/PlasmicIcon__LogoiconOnly"; // plasmic-import: 6hDsAWpXvZ_f/icon

createPlasmicElementProxy;

export type PlasmicFeature__VariantMembers = {
  muted: "muted";
};
export type PlasmicFeature__VariantsArgs = {
  muted?: SingleBooleanChoiceArg<"muted">;
};
type VariantPropType = keyof PlasmicFeature__VariantsArgs;
export const PlasmicFeature__VariantProps = new Array<VariantPropType>("muted");

export type PlasmicFeature__ArgsType = {
  pricing?: React.ReactNode;
  description?: React.ReactNode;
};
type ArgPropType = keyof PlasmicFeature__ArgsType;
export const PlasmicFeature__ArgProps = new Array<ArgPropType>(
  "pricing",
  "description"
);

export type PlasmicFeature__OverridesType = {
  root?: Flex__<"div">;
  body?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  svg?: Flex__<"svg">;
  content?: Flex__<"div">;
  featureConent?: Flex__<"div">;
  title?: Flex__<"div">;
  featureDescription?: Flex__<"div">;
};

export interface DefaultFeatureProps {
  pricing?: React.ReactNode;
  description?: React.ReactNode;
  muted?: SingleBooleanChoiceArg<"muted">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFeature__RenderFunc(props: {
  variants: PlasmicFeature__VariantsArgs;
  args: PlasmicFeature__ArgsType;
  overrides: PlasmicFeature__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "muted",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.muted
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    themes: useThemes(),
    mode: useMode(),
    theme: useTheme()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_global_css.plasmic_tokens,
        plasmic_semantic_css.plasmic_tokens,
        plasmic_components_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_global_css.global_mode_dark]: hasVariant(
            globalVariants,
            "mode",
            "dark"
          ),
          [plasmic_semantic_css.global_themes_light]: hasVariant(
            globalVariants,
            "themes",
            "light"
          ),
          [projectcss.global_theme_ss]: hasVariant(
            globalVariants,
            "theme",
            "ss"
          ),
          [sty.rootmuted]: hasVariant($state, "muted", "muted")
        }
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"body"}
        data-plasmic-override={overrides.body}
        hasGap={true}
        className={classNames(projectcss.all, sty.body, {
          [sty.bodymuted]: hasVariant($state, "muted", "muted")
        })}
      >
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          <LogoiconOnlyIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg, {
              [sty.svgmuted]: hasVariant($state, "muted", "muted")
            })}
            role={"img"}
          />
        </div>
        <Stack__
          as={"div"}
          data-plasmic-name={"content"}
          data-plasmic-override={overrides.content}
          hasGap={true}
          className={classNames(projectcss.all, sty.content)}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"featureConent"}
            data-plasmic-override={overrides.featureConent}
            hasGap={true}
            className={classNames(projectcss.all, sty.featureConent, {
              [sty.featureConentmuted]: hasVariant($state, "muted", "muted")
            })}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"title"}
              data-plasmic-override={overrides.title}
              hasGap={true}
              className={classNames(projectcss.all, sty.title, {
                [sty.titlemuted]: hasVariant($state, "muted", "muted")
              })}
            >
              {renderPlasmicSlot({
                defaultContents: "Headline here",
                value: args.pricing,
                className: classNames(sty.slotTargetPricing)
              })}
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"featureDescription"}
              data-plasmic-override={overrides.featureDescription}
              hasGap={true}
              className={classNames(projectcss.all, sty.featureDescription, {
                [sty.featureDescriptionmuted]: hasVariant(
                  $state,
                  "muted",
                  "muted"
                )
              })}
            >
              {renderPlasmicSlot({
                defaultContents:
                  "Mr. Kitty id chase the red dot Aliquam classy pellentesque urna ambush",
                value: args.description,
                className: classNames(sty.slotTargetDescription, {
                  [sty.slotTargetDescriptionmuted]: hasVariant(
                    $state,
                    "muted",
                    "muted"
                  )
                })
              })}
            </Stack__>
          </Stack__>
        </Stack__>
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "body",
    "freeBox",
    "svg",
    "content",
    "featureConent",
    "title",
    "featureDescription"
  ],
  body: [
    "body",
    "freeBox",
    "svg",
    "content",
    "featureConent",
    "title",
    "featureDescription"
  ],
  freeBox: ["freeBox", "svg"],
  svg: ["svg"],
  content: ["content", "featureConent", "title", "featureDescription"],
  featureConent: ["featureConent", "title", "featureDescription"],
  title: ["title"],
  featureDescription: ["featureDescription"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  body: "div";
  freeBox: "div";
  svg: "svg";
  content: "div";
  featureConent: "div";
  title: "div";
  featureDescription: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFeature__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFeature__VariantsArgs;
    args?: PlasmicFeature__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFeature__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFeature__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFeature__ArgProps,
          internalVariantPropNames: PlasmicFeature__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFeature__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFeature";
  } else {
    func.displayName = `PlasmicFeature.${nodeName}`;
  }
  return func;
}

export const PlasmicFeature = Object.assign(
  // Top-level PlasmicFeature renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    body: makeNodeComponent("body"),
    freeBox: makeNodeComponent("freeBox"),
    svg: makeNodeComponent("svg"),
    content: makeNodeComponent("content"),
    featureConent: makeNodeComponent("featureConent"),
    title: makeNodeComponent("title"),
    featureDescription: makeNodeComponent("featureDescription"),

    // Metadata about props expected for PlasmicFeature
    internalVariantProps: PlasmicFeature__VariantProps,
    internalArgProps: PlasmicFeature__ArgProps
  }
);

export default PlasmicFeature;
/* prettier-ignore-end */
