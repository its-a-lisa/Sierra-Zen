// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kBiiqTtxZvnVSTutAvHVvx
// Component: XKAFJuUYdmRi

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import UserCard from "../../UserCard"; // plasmic-import: cP0P4GAiadOu/component

import {
  ThemesValue,
  useThemes
} from "../semantic/PlasmicGlobalVariant__Themes"; // plasmic-import: 0bVElF6gUuDv/globalVariant
import { ModeValue, useMode } from "../global/PlasmicGlobalVariant__Mode"; // plasmic-import: 4o07efrW3bsm/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_global_css from "../global/plasmic_global.module.css"; // plasmic-import: 8hqEu73KETDHFVi1kzitzB/projectcss
import plasmic_semantic_css from "../semantic/plasmic_semantic.module.css"; // plasmic-import: b1udyYxbVnA5YsUcRMaXei/projectcss
import plasmic_components_css from "../components/plasmic_components.module.css"; // plasmic-import: 5ccFCnH7of5M9MPpSs86Uj/projectcss
import plasmic_patterns_css from "../patterns/plasmic_patterns.module.css"; // plasmic-import: ddwNfuV1d3sS7wxTc5aLdh/projectcss
import projectcss from "./plasmic_sections.module.css"; // plasmic-import: kBiiqTtxZvnVSTutAvHVvx/projectcss
import sty from "./PlasmicTeam.module.css"; // plasmic-import: XKAFJuUYdmRi/css

createPlasmicElementProxy;

export type PlasmicTeam__VariantMembers = {};
export type PlasmicTeam__VariantsArgs = {};
type VariantPropType = keyof PlasmicTeam__VariantsArgs;
export const PlasmicTeam__VariantProps = new Array<VariantPropType>();

export type PlasmicTeam__ArgsType = {};
type ArgPropType = keyof PlasmicTeam__ArgsType;
export const PlasmicTeam__ArgProps = new Array<ArgPropType>();

export type PlasmicTeam__OverridesType = {
  root?: Flex__<"div">;
  team?: Flex__<"div">;
  overlay?: Flex__<"div">;
  titleTeamBlock?: Flex__<"div">;
  kickerTitleContent?: Flex__<"div">;
  titleContent?: Flex__<"div">;
  teamBlock?: Flex__<"div">;
  row?: Flex__<"div">;
  userCard?: Flex__<typeof UserCard>;
  userCard2?: Flex__<typeof UserCard>;
  userCard3?: Flex__<typeof UserCard>;
  row2?: Flex__<"div">;
  userCard4?: Flex__<typeof UserCard>;
  userCard5?: Flex__<typeof UserCard>;
  userCard6?: Flex__<typeof UserCard>;
};

export interface DefaultTeamProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTeam__RenderFunc(props: {
  variants: PlasmicTeam__VariantsArgs;
  args: PlasmicTeam__ArgsType;
  overrides: PlasmicTeam__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    themes: useThemes(),
    mode: useMode()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_global_css.plasmic_tokens,
        plasmic_semantic_css.plasmic_tokens,
        plasmic_components_css.plasmic_tokens,
        plasmic_patterns_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_global_css.global_mode_dark]: hasVariant(
            globalVariants,
            "mode",
            "dark"
          ),
          [plasmic_semantic_css.global_themes_light]: hasVariant(
            globalVariants,
            "themes",
            "light"
          )
        }
      )}
    >
      <div
        data-plasmic-name={"team"}
        data-plasmic-override={overrides.team}
        className={classNames(projectcss.all, sty.team)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"overlay"}
          data-plasmic-override={overrides.overlay}
          hasGap={true}
          className={classNames(projectcss.all, sty.overlay)}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"titleTeamBlock"}
            data-plasmic-override={overrides.titleTeamBlock}
            hasGap={true}
            className={classNames(projectcss.all, sty.titleTeamBlock)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"kickerTitleContent"}
              data-plasmic-override={overrides.kickerTitleContent}
              hasGap={true}
              className={classNames(projectcss.all, sty.kickerTitleContent)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gavr7
                )}
              >
                {"TOKEN ZEN GARDEN"}
              </div>
              <Stack__
                as={"div"}
                data-plasmic-name={"titleContent"}
                data-plasmic-override={overrides.titleContent}
                hasGap={true}
                className={classNames(projectcss.all, sty.titleContent)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jexDh
                  )}
                >
                  {"There is no mistake in nature"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fcyuy
                  )}
                >
                  {
                    "The feeling that any task is a nuisance will soon disappear if it is done in mindfulness.\nWhen you realize nothing is lacking, the whole world belongs to you."
                  }
                </div>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"teamBlock"}
              data-plasmic-override={overrides.teamBlock}
              hasGap={true}
              className={classNames(projectcss.all, sty.teamBlock)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"row"}
                data-plasmic-override={overrides.row}
                hasGap={true}
                className={classNames(projectcss.all, sty.row)}
              >
                <UserCard
                  data-plasmic-name={"userCard"}
                  data-plasmic-override={overrides.userCard}
                  className={classNames("__wab_instance", sty.userCard)}
                  name={
                    <span
                      className={classNames(
                        projectcss.all,
                        projectcss.span,
                        projectcss.__wab_text,
                        sty.span__sYeie
                      )}
                    >
                      {"Mike Kamminga"}
                    </span>
                  }
                />

                <UserCard
                  data-plasmic-name={"userCard2"}
                  data-plasmic-override={overrides.userCard2}
                  className={classNames("__wab_instance", sty.userCard2)}
                  name={
                    <span
                      className={classNames(
                        projectcss.all,
                        projectcss.span,
                        projectcss.__wab_text,
                        sty.span__mrjd0
                      )}
                    >
                      {"Esther Cheran"}
                    </span>
                  }
                />

                {false ? (
                  <UserCard
                    data-plasmic-name={"userCard3"}
                    data-plasmic-override={overrides.userCard3}
                    className={classNames("__wab_instance", sty.userCard3)}
                    name={
                      <span
                        className={classNames(
                          projectcss.all,
                          projectcss.span,
                          projectcss.__wab_text,
                          sty.span__w3Aw
                        )}
                      >
                        {"Jan Six"}
                      </span>
                    }
                  />
                ) : null}
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"row2"}
                data-plasmic-override={overrides.row2}
                hasGap={true}
                className={classNames(projectcss.all, sty.row2)}
              >
                <UserCard
                  data-plasmic-name={"userCard4"}
                  data-plasmic-override={overrides.userCard4}
                  className={classNames("__wab_instance", sty.userCard4)}
                  name={
                    <span
                      className={classNames(
                        projectcss.all,
                        projectcss.span,
                        projectcss.__wab_text,
                        sty.span__sqeXb
                      )}
                    >
                      {"Jan Six"}
                    </span>
                  }
                />

                <UserCard
                  data-plasmic-name={"userCard5"}
                  data-plasmic-override={overrides.userCard5}
                  className={classNames("__wab_instance", sty.userCard5)}
                  name={
                    <span
                      className={classNames(
                        projectcss.all,
                        projectcss.span,
                        projectcss.__wab_text,
                        sty.span__wmbK0
                      )}
                    >
                      {"Marc Andrew"}
                    </span>
                  }
                />

                {false ? (
                  <UserCard
                    data-plasmic-name={"userCard6"}
                    data-plasmic-override={overrides.userCard6}
                    className={classNames("__wab_instance", sty.userCard6)}
                    name={
                      <span
                        className={classNames(
                          projectcss.all,
                          projectcss.span,
                          projectcss.__wab_text,
                          sty.span__h4Yd
                        )}
                      >
                        {"Henrik Hooten"}
                      </span>
                    }
                  />
                ) : null}
              </Stack__>
            </Stack__>
          </Stack__>
        </Stack__>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "team",
    "overlay",
    "titleTeamBlock",
    "kickerTitleContent",
    "titleContent",
    "teamBlock",
    "row",
    "userCard",
    "userCard2",
    "userCard3",
    "row2",
    "userCard4",
    "userCard5",
    "userCard6"
  ],
  team: [
    "team",
    "overlay",
    "titleTeamBlock",
    "kickerTitleContent",
    "titleContent",
    "teamBlock",
    "row",
    "userCard",
    "userCard2",
    "userCard3",
    "row2",
    "userCard4",
    "userCard5",
    "userCard6"
  ],
  overlay: [
    "overlay",
    "titleTeamBlock",
    "kickerTitleContent",
    "titleContent",
    "teamBlock",
    "row",
    "userCard",
    "userCard2",
    "userCard3",
    "row2",
    "userCard4",
    "userCard5",
    "userCard6"
  ],
  titleTeamBlock: [
    "titleTeamBlock",
    "kickerTitleContent",
    "titleContent",
    "teamBlock",
    "row",
    "userCard",
    "userCard2",
    "userCard3",
    "row2",
    "userCard4",
    "userCard5",
    "userCard6"
  ],
  kickerTitleContent: ["kickerTitleContent", "titleContent"],
  titleContent: ["titleContent"],
  teamBlock: [
    "teamBlock",
    "row",
    "userCard",
    "userCard2",
    "userCard3",
    "row2",
    "userCard4",
    "userCard5",
    "userCard6"
  ],
  row: ["row", "userCard", "userCard2", "userCard3"],
  userCard: ["userCard"],
  userCard2: ["userCard2"],
  userCard3: ["userCard3"],
  row2: ["row2", "userCard4", "userCard5", "userCard6"],
  userCard4: ["userCard4"],
  userCard5: ["userCard5"],
  userCard6: ["userCard6"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  team: "div";
  overlay: "div";
  titleTeamBlock: "div";
  kickerTitleContent: "div";
  titleContent: "div";
  teamBlock: "div";
  row: "div";
  userCard: typeof UserCard;
  userCard2: typeof UserCard;
  userCard3: typeof UserCard;
  row2: "div";
  userCard4: typeof UserCard;
  userCard5: typeof UserCard;
  userCard6: typeof UserCard;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTeam__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTeam__VariantsArgs;
    args?: PlasmicTeam__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTeam__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTeam__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTeam__ArgProps,
          internalVariantPropNames: PlasmicTeam__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTeam__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTeam";
  } else {
    func.displayName = `PlasmicTeam.${nodeName}`;
  }
  return func;
}

export const PlasmicTeam = Object.assign(
  // Top-level PlasmicTeam renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    team: makeNodeComponent("team"),
    overlay: makeNodeComponent("overlay"),
    titleTeamBlock: makeNodeComponent("titleTeamBlock"),
    kickerTitleContent: makeNodeComponent("kickerTitleContent"),
    titleContent: makeNodeComponent("titleContent"),
    teamBlock: makeNodeComponent("teamBlock"),
    row: makeNodeComponent("row"),
    userCard: makeNodeComponent("userCard"),
    userCard2: makeNodeComponent("userCard2"),
    userCard3: makeNodeComponent("userCard3"),
    row2: makeNodeComponent("row2"),
    userCard4: makeNodeComponent("userCard4"),
    userCard5: makeNodeComponent("userCard5"),
    userCard6: makeNodeComponent("userCard6"),

    // Metadata about props expected for PlasmicTeam
    internalVariantProps: PlasmicTeam__VariantProps,
    internalArgProps: PlasmicTeam__ArgProps
  }
);

export default PlasmicTeam;
/* prettier-ignore-end */
