// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kBiiqTtxZvnVSTutAvHVvx
// Component: R5STJBdF2mzK

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Logo from "../../Logo"; // plasmic-import: XlGkKwRu0dWg/component
import Logomark from "../../Logomark"; // plasmic-import: r-vWKNVgrLWd/component
import MenuBar from "../../MenuBar"; // plasmic-import: Gs3MCCEEfJ-V/component
import MenuBarItem from "../../MenuBarItem"; // plasmic-import: BZyQOLb-FXVn/component

import { ModeValue, useMode } from "../global/PlasmicGlobalVariant__Mode"; // plasmic-import: 4o07efrW3bsm/globalVariant
import {
  ThemesValue,
  useThemes
} from "../semantic/PlasmicGlobalVariant__Themes"; // plasmic-import: 0bVElF6gUuDv/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_global_css from "../global/plasmic_global.module.css"; // plasmic-import: 8hqEu73KETDHFVi1kzitzB/projectcss
import plasmic_semantic_css from "../semantic/plasmic_semantic.module.css"; // plasmic-import: b1udyYxbVnA5YsUcRMaXei/projectcss
import plasmic_components_css from "../components/plasmic_components.module.css"; // plasmic-import: 5ccFCnH7of5M9MPpSs86Uj/projectcss
import plasmic_patterns_css from "../patterns/plasmic_patterns.module.css"; // plasmic-import: ddwNfuV1d3sS7wxTc5aLdh/projectcss
import projectcss from "./plasmic_sections.module.css"; // plasmic-import: kBiiqTtxZvnVSTutAvHVvx/projectcss
import sty from "./PlasmicFooter.module.css"; // plasmic-import: R5STJBdF2mzK/css

import LogoiconOnlyIcon from "../components/icons/PlasmicIcon__LogoiconOnly"; // plasmic-import: svdAH5AfFjuz/icon
import LogoiconTextSinglelineIcon from "../components/icons/PlasmicIcon__LogoiconTextSingleline"; // plasmic-import: nPnLUn6MsX7F/icon
import LogoiconTextMultilineIcon from "../components/icons/PlasmicIcon__LogoiconTextMultiline"; // plasmic-import: YiF5QN5X5Ngd/icon

createPlasmicElementProxy;

export type PlasmicFooter__VariantMembers = {};
export type PlasmicFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicFooter__VariantsArgs;
export const PlasmicFooter__VariantProps = new Array<VariantPropType>();

export type PlasmicFooter__ArgsType = {};
type ArgPropType = keyof PlasmicFooter__ArgsType;
export const PlasmicFooter__ArgProps = new Array<ArgPropType>();

export type PlasmicFooter__OverridesType = {
  footer?: Flex__<"div">;
  overlay?: Flex__<"div">;
  logo?: Flex__<typeof Logo>;
  logomark?: Flex__<typeof Logomark>;
  svg?: Flex__<"svg">;
  text?: Flex__<"div">;
  menuBar?: Flex__<typeof MenuBar>;
  dividerHorizontal?: Flex__<"div">;
  createdWithCabanaDesignSystemTokenZenGarden?: Flex__<"div">;
};

export interface DefaultFooterProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFooter__RenderFunc(props: {
  variants: PlasmicFooter__VariantsArgs;
  args: PlasmicFooter__ArgsType;
  overrides: PlasmicFooter__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    mode: useMode(),
    themes: useThemes()
  });

  return (
    <div
      data-plasmic-name={"footer"}
      data-plasmic-override={overrides.footer}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_global_css.plasmic_tokens,
        plasmic_semantic_css.plasmic_tokens,
        plasmic_components_css.plasmic_tokens,
        plasmic_patterns_css.plasmic_tokens,
        sty.footer,
        {
          [plasmic_global_css.global_mode_dark]: hasVariant(
            globalVariants,
            "mode",
            "dark"
          ),
          [plasmic_semantic_css.global_themes_light]: hasVariant(
            globalVariants,
            "themes",
            "light"
          )
        }
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"overlay"}
        data-plasmic-override={overrides.overlay}
        hasGap={true}
        className={classNames(projectcss.all, sty.overlay)}
      >
        <Logo
          data-plasmic-name={"logo"}
          data-plasmic-override={overrides.logo}
          className={classNames("__wab_instance", sty.logo)}
          slot={
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {"Logoipsum"}
            </div>
          }
        >
          <Logomark
            data-plasmic-name={"logomark"}
            data-plasmic-override={overrides.logomark}
            className={classNames("__wab_instance", sty.logomark)}
          >
            <LogoiconOnlyIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              role={"img"}
            />
          </Logomark>
        </Logo>
        <MenuBar
          data-plasmic-name={"menuBar"}
          data-plasmic-override={overrides.menuBar}
          className={classNames("__wab_instance", sty.menuBar)}
          itemCount={"_4"}
        />

        <div
          data-plasmic-name={"dividerHorizontal"}
          data-plasmic-override={overrides.dividerHorizontal}
          className={classNames(projectcss.all, sty.dividerHorizontal)}
        />

        <div
          data-plasmic-name={"createdWithCabanaDesignSystemTokenZenGarden"}
          data-plasmic-override={
            overrides.createdWithCabanaDesignSystemTokenZenGarden
          }
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.createdWithCabanaDesignSystemTokenZenGarden
          )}
        >
          {"Created with Cabana Design System & Token Zen Garden. "}
        </div>
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  footer: [
    "footer",
    "overlay",
    "logo",
    "logomark",
    "svg",
    "text",
    "menuBar",
    "dividerHorizontal",
    "createdWithCabanaDesignSystemTokenZenGarden"
  ],
  overlay: [
    "overlay",
    "logo",
    "logomark",
    "svg",
    "text",
    "menuBar",
    "dividerHorizontal",
    "createdWithCabanaDesignSystemTokenZenGarden"
  ],
  logo: ["logo", "logomark", "svg", "text"],
  logomark: ["logomark", "svg"],
  svg: ["svg"],
  text: ["text"],
  menuBar: ["menuBar"],
  dividerHorizontal: ["dividerHorizontal"],
  createdWithCabanaDesignSystemTokenZenGarden: [
    "createdWithCabanaDesignSystemTokenZenGarden"
  ]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  footer: "div";
  overlay: "div";
  logo: typeof Logo;
  logomark: typeof Logomark;
  svg: "svg";
  text: "div";
  menuBar: typeof MenuBar;
  dividerHorizontal: "div";
  createdWithCabanaDesignSystemTokenZenGarden: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooter__VariantsArgs;
    args?: PlasmicFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFooter__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFooter__ArgProps,
          internalVariantPropNames: PlasmicFooter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "footer") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("footer"),
  {
    // Helper components rendering sub-elements
    overlay: makeNodeComponent("overlay"),
    logo: makeNodeComponent("logo"),
    logomark: makeNodeComponent("logomark"),
    svg: makeNodeComponent("svg"),
    text: makeNodeComponent("text"),
    menuBar: makeNodeComponent("menuBar"),
    dividerHorizontal: makeNodeComponent("dividerHorizontal"),
    createdWithCabanaDesignSystemTokenZenGarden: makeNodeComponent(
      "createdWithCabanaDesignSystemTokenZenGarden"
    ),

    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
