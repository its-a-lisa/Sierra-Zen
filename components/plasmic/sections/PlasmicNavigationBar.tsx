// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kBiiqTtxZvnVSTutAvHVvx
// Component: praQfa1JW-GU

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Logo from "../../Logo"; // plasmic-import: XlGkKwRu0dWg/component
import Logomark from "../../Logomark"; // plasmic-import: r-vWKNVgrLWd/component
import MenuBar from "../../MenuBar"; // plasmic-import: Gs3MCCEEfJ-V/component
import MenuBarItem from "../../MenuBarItem"; // plasmic-import: BZyQOLb-FXVn/component
import Button from "../../Button"; // plasmic-import: 7RW-0EHs1VqU/component

import {
  ThemesValue,
  useThemes
} from "../semantic/PlasmicGlobalVariant__Themes"; // plasmic-import: 0bVElF6gUuDv/globalVariant
import { ModeValue, useMode } from "../global/PlasmicGlobalVariant__Mode"; // plasmic-import: 4o07efrW3bsm/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_global_css from "../global/plasmic_global.module.css"; // plasmic-import: 8hqEu73KETDHFVi1kzitzB/projectcss
import plasmic_semantic_css from "../semantic/plasmic_semantic.module.css"; // plasmic-import: b1udyYxbVnA5YsUcRMaXei/projectcss
import plasmic_components_css from "../components/plasmic_components.module.css"; // plasmic-import: 5ccFCnH7of5M9MPpSs86Uj/projectcss
import plasmic_patterns_css from "../patterns/plasmic_patterns.module.css"; // plasmic-import: ddwNfuV1d3sS7wxTc5aLdh/projectcss
import projectcss from "./plasmic_sections.module.css"; // plasmic-import: kBiiqTtxZvnVSTutAvHVvx/projectcss
import sty from "./PlasmicNavigationBar.module.css"; // plasmic-import: praQfa1JW-GU/css

import LogoiconOnlyIcon from "../components/icons/PlasmicIcon__LogoiconOnly"; // plasmic-import: svdAH5AfFjuz/icon
import LogoiconTextSinglelineIcon from "../components/icons/PlasmicIcon__LogoiconTextSingleline"; // plasmic-import: nPnLUn6MsX7F/icon
import LogoiconTextMultilineIcon from "../components/icons/PlasmicIcon__LogoiconTextMultiline"; // plasmic-import: YiF5QN5X5Ngd/icon
import ChecksvgIcon from "../components/icons/PlasmicIcon__Checksvg"; // plasmic-import: Gl9W2RPSIc13/icon
import IconrightArrowIcon from "../components/icons/PlasmicIcon__IconrightArrow"; // plasmic-import: WAD5gXhAHTho/icon

createPlasmicElementProxy;

export type PlasmicNavigationBar__VariantMembers = {};
export type PlasmicNavigationBar__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavigationBar__VariantsArgs;
export const PlasmicNavigationBar__VariantProps = new Array<VariantPropType>();

export type PlasmicNavigationBar__ArgsType = {};
type ArgPropType = keyof PlasmicNavigationBar__ArgsType;
export const PlasmicNavigationBar__ArgProps = new Array<ArgPropType>();

export type PlasmicNavigationBar__OverridesType = {
  root?: Flex__<"div">;
  navigationBar?: Flex__<"div">;
  logoMenuBar?: Flex__<"div">;
  logo?: Flex__<typeof Logo>;
  menuBar?: Flex__<typeof MenuBar>;
  buttons?: Flex__<"div">;
  button?: Flex__<typeof Button>;
  button2?: Flex__<typeof Button>;
};

export interface DefaultNavigationBarProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNavigationBar__RenderFunc(props: {
  variants: PlasmicNavigationBar__VariantsArgs;
  args: PlasmicNavigationBar__ArgsType;
  overrides: PlasmicNavigationBar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    themes: useThemes(),
    mode: useMode()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_global_css.plasmic_tokens,
        plasmic_semantic_css.plasmic_tokens,
        plasmic_components_css.plasmic_tokens,
        plasmic_patterns_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_global_css.global_mode_dark]: hasVariant(
            globalVariants,
            "mode",
            "dark"
          ),
          [plasmic_semantic_css.global_themes_light]: hasVariant(
            globalVariants,
            "themes",
            "light"
          )
        }
      )}
    >
      <div
        data-plasmic-name={"navigationBar"}
        data-plasmic-override={overrides.navigationBar}
        className={classNames(projectcss.all, sty.navigationBar)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"logoMenuBar"}
          data-plasmic-override={overrides.logoMenuBar}
          hasGap={true}
          className={classNames(projectcss.all, sty.logoMenuBar)}
        >
          <Logo
            data-plasmic-name={"logo"}
            data-plasmic-override={overrides.logo}
            className={classNames("__wab_instance", sty.logo)}
          />

          <MenuBar
            data-plasmic-name={"menuBar"}
            data-plasmic-override={overrides.menuBar}
            className={classNames("__wab_instance", sty.menuBar)}
            itemCount={"_4"}
          />
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"buttons"}
          data-plasmic-override={overrides.buttons}
          hasGap={true}
          className={classNames(projectcss.all, sty.buttons)}
        >
          <Button
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            className={classNames("__wab_instance", sty.button)}
          />

          <Button
            data-plasmic-name={"button2"}
            data-plasmic-override={overrides.button2}
            className={classNames("__wab_instance", sty.button2)}
          />
        </Stack__>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navigationBar",
    "logoMenuBar",
    "logo",
    "menuBar",
    "buttons",
    "button",
    "button2"
  ],
  navigationBar: [
    "navigationBar",
    "logoMenuBar",
    "logo",
    "menuBar",
    "buttons",
    "button",
    "button2"
  ],
  logoMenuBar: ["logoMenuBar", "logo", "menuBar"],
  logo: ["logo"],
  menuBar: ["menuBar"],
  buttons: ["buttons", "button", "button2"],
  button: ["button"],
  button2: ["button2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navigationBar: "div";
  logoMenuBar: "div";
  logo: typeof Logo;
  menuBar: typeof MenuBar;
  buttons: "div";
  button: typeof Button;
  button2: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavigationBar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavigationBar__VariantsArgs;
    args?: PlasmicNavigationBar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavigationBar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNavigationBar__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavigationBar__ArgProps,
          internalVariantPropNames: PlasmicNavigationBar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavigationBar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavigationBar";
  } else {
    func.displayName = `PlasmicNavigationBar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavigationBar = Object.assign(
  // Top-level PlasmicNavigationBar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navigationBar: makeNodeComponent("navigationBar"),
    logoMenuBar: makeNodeComponent("logoMenuBar"),
    logo: makeNodeComponent("logo"),
    menuBar: makeNodeComponent("menuBar"),
    buttons: makeNodeComponent("buttons"),
    button: makeNodeComponent("button"),
    button2: makeNodeComponent("button2"),

    // Metadata about props expected for PlasmicNavigationBar
    internalVariantProps: PlasmicNavigationBar__VariantProps,
    internalArgProps: PlasmicNavigationBar__ArgProps
  }
);

export default PlasmicNavigationBar;
/* prettier-ignore-end */
