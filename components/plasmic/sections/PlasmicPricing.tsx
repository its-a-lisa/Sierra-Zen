// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kBiiqTtxZvnVSTutAvHVvx
// Component: HqnaUHdWU3HH

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Toggle from "../../Toggle"; // plasmic-import: 6dDHFP7ZfUNX/component
import PricingCard from "../../PricingCard"; // plasmic-import: 7lr5qwctNVnD/component

import { ModeValue, useMode } from "../global/PlasmicGlobalVariant__Mode"; // plasmic-import: 4o07efrW3bsm/globalVariant
import {
  ThemesValue,
  useThemes
} from "../semantic/PlasmicGlobalVariant__Themes"; // plasmic-import: 0bVElF6gUuDv/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_global_css from "../global/plasmic_global.module.css"; // plasmic-import: 8hqEu73KETDHFVi1kzitzB/projectcss
import plasmic_semantic_css from "../semantic/plasmic_semantic.module.css"; // plasmic-import: b1udyYxbVnA5YsUcRMaXei/projectcss
import plasmic_components_css from "../components/plasmic_components.module.css"; // plasmic-import: 5ccFCnH7of5M9MPpSs86Uj/projectcss
import plasmic_patterns_css from "../patterns/plasmic_patterns.module.css"; // plasmic-import: ddwNfuV1d3sS7wxTc5aLdh/projectcss
import projectcss from "./plasmic_sections.module.css"; // plasmic-import: kBiiqTtxZvnVSTutAvHVvx/projectcss
import sty from "./PlasmicPricing.module.css"; // plasmic-import: HqnaUHdWU3HH/css

createPlasmicElementProxy;

export type PlasmicPricing__VariantMembers = {};
export type PlasmicPricing__VariantsArgs = {};
type VariantPropType = keyof PlasmicPricing__VariantsArgs;
export const PlasmicPricing__VariantProps = new Array<VariantPropType>();

export type PlasmicPricing__ArgsType = {};
type ArgPropType = keyof PlasmicPricing__ArgsType;
export const PlasmicPricing__ArgProps = new Array<ArgPropType>();

export type PlasmicPricing__OverridesType = {
  pricing?: Flex__<"div">;
  overlay?: Flex__<"div">;
  titleTogglePricingBlock?: Flex__<"div">;
  kickerTitleContent?: Flex__<"div">;
  titleContent?: Flex__<"div">;
  pricingTablePricingToggle?: Flex__<"div">;
  toggle?: Flex__<typeof Toggle>;
  pricingBlock?: Flex__<"div">;
  row?: Flex__<"div">;
  pricingCard?: Flex__<typeof PricingCard>;
  pricingCard2?: Flex__<typeof PricingCard>;
};

export interface DefaultPricingProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPricing__RenderFunc(props: {
  variants: PlasmicPricing__VariantsArgs;
  args: PlasmicPricing__ArgsType;
  overrides: PlasmicPricing__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "toggle.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    mode: useMode(),
    themes: useThemes()
  });

  return (
    <div
      data-plasmic-name={"pricing"}
      data-plasmic-override={overrides.pricing}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_global_css.plasmic_tokens,
        plasmic_semantic_css.plasmic_tokens,
        plasmic_components_css.plasmic_tokens,
        plasmic_patterns_css.plasmic_tokens,
        sty.pricing,
        {
          [plasmic_global_css.global_mode_dark]: hasVariant(
            globalVariants,
            "mode",
            "dark"
          ),
          [plasmic_semantic_css.global_themes_light]: hasVariant(
            globalVariants,
            "themes",
            "light"
          )
        }
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"overlay"}
        data-plasmic-override={overrides.overlay}
        hasGap={true}
        className={classNames(projectcss.all, sty.overlay)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"titleTogglePricingBlock"}
          data-plasmic-override={overrides.titleTogglePricingBlock}
          hasGap={true}
          className={classNames(projectcss.all, sty.titleTogglePricingBlock)}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"kickerTitleContent"}
            data-plasmic-override={overrides.kickerTitleContent}
            hasGap={true}
            className={classNames(projectcss.all, sty.kickerTitleContent)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rkPq
              )}
            >
              {"TOKEN ZEN GARDEN"}
            </div>
            <Stack__
              as={"div"}
              data-plasmic-name={"titleContent"}
              data-plasmic-override={overrides.titleContent}
              hasGap={true}
              className={classNames(projectcss.all, sty.titleContent)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__al69F
                )}
              >
                {"Smile, breathe and go slowly"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rilf1
                )}
              >
                {
                  "Zen is not some kind of excitement, but concentration on our usual everyday routine.\nThe practice of Zen is forgetting the self in the act of uniting with something."
                }
              </div>
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"pricingTablePricingToggle"}
            data-plasmic-override={overrides.pricingTablePricingToggle}
            hasGap={true}
            className={classNames(
              projectcss.all,
              sty.pricingTablePricingToggle
            )}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__sdkG
              )}
            >
              {"Monthly"}
            </div>
            <Toggle
              data-plasmic-name={"toggle"}
              data-plasmic-override={overrides.toggle}
              className={classNames("__wab_instance", sty.toggle)}
              isChecked={
                generateStateValueProp($state, ["toggle", "isChecked"]) ?? false
              }
              onChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["toggle", "isChecked"])(
                  eventArgs[0]
                );
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vPadJ
              )}
            >
              {"Yearly"}
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"pricingBlock"}
            data-plasmic-override={overrides.pricingBlock}
            hasGap={true}
            className={classNames(projectcss.all, sty.pricingBlock)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"row"}
              data-plasmic-override={overrides.row}
              hasGap={true}
              className={classNames(projectcss.all, sty.row)}
            >
              <PricingCard
                data-plasmic-name={"pricingCard"}
                data-plasmic-override={overrides.pricingCard}
                className={classNames("__wab_instance", sty.pricingCard, {
                  [sty.pricingCardglobal_mode_dark]: hasVariant(
                    globalVariants,
                    "mode",
                    "dark"
                  )
                })}
                description={
                  <span
                    className={classNames(
                      projectcss.all,
                      projectcss.span,
                      projectcss.__wab_text,
                      sty.span__jzQm
                    )}
                  >
                    {
                      "Do not follow the idea of others, but learn to listen to the voice within yourself."
                    }
                  </span>
                }
              />

              <PricingCard
                data-plasmic-name={"pricingCard2"}
                data-plasmic-override={overrides.pricingCard2}
                className={classNames("__wab_instance", sty.pricingCard2)}
                description={
                  <span
                    className={classNames(
                      projectcss.all,
                      projectcss.span,
                      projectcss.__wab_text,
                      sty.span___7Gw8A
                    )}
                  >
                    {
                      "Do not follow the idea of others, but learn to listen to the voice within yourself."
                    }
                  </span>
                }
              />
            </Stack__>
          </Stack__>
        </Stack__>
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  pricing: [
    "pricing",
    "overlay",
    "titleTogglePricingBlock",
    "kickerTitleContent",
    "titleContent",
    "pricingTablePricingToggle",
    "toggle",
    "pricingBlock",
    "row",
    "pricingCard",
    "pricingCard2"
  ],
  overlay: [
    "overlay",
    "titleTogglePricingBlock",
    "kickerTitleContent",
    "titleContent",
    "pricingTablePricingToggle",
    "toggle",
    "pricingBlock",
    "row",
    "pricingCard",
    "pricingCard2"
  ],
  titleTogglePricingBlock: [
    "titleTogglePricingBlock",
    "kickerTitleContent",
    "titleContent",
    "pricingTablePricingToggle",
    "toggle",
    "pricingBlock",
    "row",
    "pricingCard",
    "pricingCard2"
  ],
  kickerTitleContent: ["kickerTitleContent", "titleContent"],
  titleContent: ["titleContent"],
  pricingTablePricingToggle: ["pricingTablePricingToggle", "toggle"],
  toggle: ["toggle"],
  pricingBlock: ["pricingBlock", "row", "pricingCard", "pricingCard2"],
  row: ["row", "pricingCard", "pricingCard2"],
  pricingCard: ["pricingCard"],
  pricingCard2: ["pricingCard2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  pricing: "div";
  overlay: "div";
  titleTogglePricingBlock: "div";
  kickerTitleContent: "div";
  titleContent: "div";
  pricingTablePricingToggle: "div";
  toggle: typeof Toggle;
  pricingBlock: "div";
  row: "div";
  pricingCard: typeof PricingCard;
  pricingCard2: typeof PricingCard;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPricing__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPricing__VariantsArgs;
    args?: PlasmicPricing__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPricing__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPricing__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPricing__ArgProps,
          internalVariantPropNames: PlasmicPricing__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPricing__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "pricing") {
    func.displayName = "PlasmicPricing";
  } else {
    func.displayName = `PlasmicPricing.${nodeName}`;
  }
  return func;
}

export const PlasmicPricing = Object.assign(
  // Top-level PlasmicPricing renders the root element
  makeNodeComponent("pricing"),
  {
    // Helper components rendering sub-elements
    overlay: makeNodeComponent("overlay"),
    titleTogglePricingBlock: makeNodeComponent("titleTogglePricingBlock"),
    kickerTitleContent: makeNodeComponent("kickerTitleContent"),
    titleContent: makeNodeComponent("titleContent"),
    pricingTablePricingToggle: makeNodeComponent("pricingTablePricingToggle"),
    toggle: makeNodeComponent("toggle"),
    pricingBlock: makeNodeComponent("pricingBlock"),
    row: makeNodeComponent("row"),
    pricingCard: makeNodeComponent("pricingCard"),
    pricingCard2: makeNodeComponent("pricingCard2"),

    // Metadata about props expected for PlasmicPricing
    internalVariantProps: PlasmicPricing__VariantProps,
    internalArgProps: PlasmicPricing__ArgProps
  }
);

export default PlasmicPricing;
/* prettier-ignore-end */
