// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kBiiqTtxZvnVSTutAvHVvx
// Component: MJ8poo-NUbWA

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Feature from "../../Feature"; // plasmic-import: LvU4TvDvM6p3/component

import { ModeValue, useMode } from "../global/PlasmicGlobalVariant__Mode"; // plasmic-import: 4o07efrW3bsm/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_global_css from "../global/plasmic_global.module.css"; // plasmic-import: 8hqEu73KETDHFVi1kzitzB/projectcss
import plasmic_semantic_css from "../semantic/plasmic_semantic.module.css"; // plasmic-import: b1udyYxbVnA5YsUcRMaXei/projectcss
import plasmic_components_css from "../components/plasmic_components.module.css"; // plasmic-import: 5ccFCnH7of5M9MPpSs86Uj/projectcss
import plasmic_patterns_css from "../patterns/plasmic_patterns.module.css"; // plasmic-import: ddwNfuV1d3sS7wxTc5aLdh/projectcss
import projectcss from "./plasmic_sections.module.css"; // plasmic-import: kBiiqTtxZvnVSTutAvHVvx/projectcss
import sty from "./PlasmicFeatures.module.css"; // plasmic-import: MJ8poo-NUbWA/css

createPlasmicElementProxy;

export type PlasmicFeatures__VariantMembers = {};
export type PlasmicFeatures__VariantsArgs = {};
type VariantPropType = keyof PlasmicFeatures__VariantsArgs;
export const PlasmicFeatures__VariantProps = new Array<VariantPropType>();

export type PlasmicFeatures__ArgsType = {};
type ArgPropType = keyof PlasmicFeatures__ArgsType;
export const PlasmicFeatures__ArgProps = new Array<ArgPropType>();

export type PlasmicFeatures__OverridesType = {
  features?: Flex__<"div">;
  overlay?: Flex__<"div">;
  titleFeaturesBlock?: Flex__<"div">;
  kickerTitleContent?: Flex__<"div">;
  titleContent?: Flex__<"div">;
  featuresBlock?: Flex__<"div">;
  row?: Flex__<"div">;
  feature?: Flex__<typeof Feature>;
  feature5?: Flex__<typeof Feature>;
  row2?: Flex__<"div">;
  feature3?: Flex__<typeof Feature>;
  feature4?: Flex__<typeof Feature>;
};

export interface DefaultFeaturesProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFeatures__RenderFunc(props: {
  variants: PlasmicFeatures__VariantsArgs;
  args: PlasmicFeatures__ArgsType;
  overrides: PlasmicFeatures__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    mode: useMode()
  });

  return (
    <div
      data-plasmic-name={"features"}
      data-plasmic-override={overrides.features}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_global_css.plasmic_tokens,
        plasmic_semantic_css.plasmic_tokens,
        plasmic_components_css.plasmic_tokens,
        plasmic_patterns_css.plasmic_tokens,
        sty.features,
        {
          [plasmic_global_css.global_mode_dark]: hasVariant(
            globalVariants,
            "mode",
            "dark"
          )
        }
      )}
    >
      <div
        data-plasmic-name={"overlay"}
        data-plasmic-override={overrides.overlay}
        className={classNames(projectcss.all, sty.overlay)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"titleFeaturesBlock"}
          data-plasmic-override={overrides.titleFeaturesBlock}
          hasGap={true}
          className={classNames(projectcss.all, sty.titleFeaturesBlock)}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"kickerTitleContent"}
            data-plasmic-override={overrides.kickerTitleContent}
            hasGap={true}
            className={classNames(projectcss.all, sty.kickerTitleContent)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__tRRlT
              )}
            >
              {"TOKEN ZEN GARDEN"}
            </div>
            <Stack__
              as={"div"}
              data-plasmic-name={"titleContent"}
              data-plasmic-override={overrides.titleContent}
              hasGap={true}
              className={classNames(projectcss.all, sty.titleContent)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___8F25R
                )}
              >
                {"Act without expectation"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___3BNd
                )}
              >
                {
                  "The practice of Zen is forgetting the self in the act of uniting with something.\n\nIf you realize you have enough, you are truly rich."
                }
              </div>
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"featuresBlock"}
            data-plasmic-override={overrides.featuresBlock}
            hasGap={true}
            className={classNames(projectcss.all, sty.featuresBlock)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"row"}
              data-plasmic-override={overrides.row}
              hasGap={true}
              className={classNames(projectcss.all, sty.row)}
            >
              <Feature
                data-plasmic-name={"feature"}
                data-plasmic-override={overrides.feature}
                className={classNames("__wab_instance", sty.feature)}
                description={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8VgWr
                    )}
                  >
                    {
                      "Mr. Kitty id chase the red dot Aliquam classy pellentesque urna ambush"
                    }
                  </div>
                }
              />

              <Feature
                data-plasmic-name={"feature5"}
                data-plasmic-override={overrides.feature5}
                className={classNames("__wab_instance", sty.feature5)}
                description={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3A4Kf
                    )}
                  >
                    {
                      "Mr. Kitty id chase the red dot Aliquam classy pellentesque urna ambush"
                    }
                  </div>
                }
              />
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"row2"}
              data-plasmic-override={overrides.row2}
              hasGap={true}
              className={classNames(projectcss.all, sty.row2)}
            >
              <Feature
                data-plasmic-name={"feature3"}
                data-plasmic-override={overrides.feature3}
                className={classNames("__wab_instance", sty.feature3)}
              />

              <Feature
                data-plasmic-name={"feature4"}
                data-plasmic-override={overrides.feature4}
                className={classNames("__wab_instance", sty.feature4)}
              />
            </Stack__>
          </Stack__>
        </Stack__>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  features: [
    "features",
    "overlay",
    "titleFeaturesBlock",
    "kickerTitleContent",
    "titleContent",
    "featuresBlock",
    "row",
    "feature",
    "feature5",
    "row2",
    "feature3",
    "feature4"
  ],
  overlay: [
    "overlay",
    "titleFeaturesBlock",
    "kickerTitleContent",
    "titleContent",
    "featuresBlock",
    "row",
    "feature",
    "feature5",
    "row2",
    "feature3",
    "feature4"
  ],
  titleFeaturesBlock: [
    "titleFeaturesBlock",
    "kickerTitleContent",
    "titleContent",
    "featuresBlock",
    "row",
    "feature",
    "feature5",
    "row2",
    "feature3",
    "feature4"
  ],
  kickerTitleContent: ["kickerTitleContent", "titleContent"],
  titleContent: ["titleContent"],
  featuresBlock: [
    "featuresBlock",
    "row",
    "feature",
    "feature5",
    "row2",
    "feature3",
    "feature4"
  ],
  row: ["row", "feature", "feature5"],
  feature: ["feature"],
  feature5: ["feature5"],
  row2: ["row2", "feature3", "feature4"],
  feature3: ["feature3"],
  feature4: ["feature4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  features: "div";
  overlay: "div";
  titleFeaturesBlock: "div";
  kickerTitleContent: "div";
  titleContent: "div";
  featuresBlock: "div";
  row: "div";
  feature: typeof Feature;
  feature5: typeof Feature;
  row2: "div";
  feature3: typeof Feature;
  feature4: typeof Feature;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFeatures__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFeatures__VariantsArgs;
    args?: PlasmicFeatures__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFeatures__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFeatures__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFeatures__ArgProps,
          internalVariantPropNames: PlasmicFeatures__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFeatures__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "features") {
    func.displayName = "PlasmicFeatures";
  } else {
    func.displayName = `PlasmicFeatures.${nodeName}`;
  }
  return func;
}

export const PlasmicFeatures = Object.assign(
  // Top-level PlasmicFeatures renders the root element
  makeNodeComponent("features"),
  {
    // Helper components rendering sub-elements
    overlay: makeNodeComponent("overlay"),
    titleFeaturesBlock: makeNodeComponent("titleFeaturesBlock"),
    kickerTitleContent: makeNodeComponent("kickerTitleContent"),
    titleContent: makeNodeComponent("titleContent"),
    featuresBlock: makeNodeComponent("featuresBlock"),
    row: makeNodeComponent("row"),
    feature: makeNodeComponent("feature"),
    feature5: makeNodeComponent("feature5"),
    row2: makeNodeComponent("row2"),
    feature3: makeNodeComponent("feature3"),
    feature4: makeNodeComponent("feature4"),

    // Metadata about props expected for PlasmicFeatures
    internalVariantProps: PlasmicFeatures__VariantProps,
    internalArgProps: PlasmicFeatures__ArgProps
  }
);

export default PlasmicFeatures;
/* prettier-ignore-end */
